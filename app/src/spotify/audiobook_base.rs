/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudiobookBase {
    /// The author(s) for the audiobook. 
    #[serde(rename = "authors")]
    pub authors: Vec<spotify::AuthorObject>,
    /// A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
    #[serde(rename = "available_markets")]
    pub available_markets: Vec<String>,
    /// The copyright statements of the audiobook. 
    #[serde(rename = "copyrights")]
    pub copyrights: Vec<spotify::CopyrightObject>,
    /// A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
    #[serde(rename = "description")]
    pub description: String,
    /// A description of the audiobook. This field may contain HTML tags. 
    #[serde(rename = "html_description")]
    pub html_description: String,
    /// The edition of the audiobook. 
    #[serde(rename = "edition", skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
    #[serde(rename = "explicit")]
    pub explicit: bool,
    /// External URLs for this audiobook. 
    #[serde(rename = "external_urls")]
    pub external_urls: Box<spotify::ExternalUrlObject>,
    /// A link to the Web API endpoint providing full details of the audiobook. 
    #[serde(rename = "href")]
    pub href: String,
    /// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
    #[serde(rename = "id")]
    pub id: String,
    /// The cover art for the audiobook in various sizes, widest first. 
    #[serde(rename = "images")]
    pub images: Vec<spotify::ImageObject>,
    /// A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
    #[serde(rename = "languages")]
    pub languages: Vec<String>,
    /// The media type of the audiobook. 
    #[serde(rename = "media_type")]
    pub media_type: String,
    /// The name of the audiobook. 
    #[serde(rename = "name")]
    pub name: String,
    /// The narrator(s) for the audiobook. 
    #[serde(rename = "narrators")]
    pub narrators: Vec<spotify::NarratorObject>,
    /// The publisher of the audiobook. 
    #[serde(rename = "publisher")]
    pub publisher: String,
    /// The object type. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
    #[serde(rename = "uri")]
    pub uri: String,
    /// The number of chapters in this audiobook. 
    #[serde(rename = "total_chapters")]
    pub total_chapters: i32,
}

impl AudiobookBase {
    pub fn new(authors: Vec<spotify::AuthorObject>, available_markets: Vec<String>, copyrights: Vec<spotify::CopyrightObject>, description: String, html_description: String, explicit: bool, external_urls: spotify::ExternalUrlObject, href: String, id: String, images: Vec<spotify::ImageObject>, languages: Vec<String>, media_type: String, name: String, narrators: Vec<spotify::NarratorObject>, publisher: String, r#type: Type, uri: String, total_chapters: i32) -> AudiobookBase {
        AudiobookBase {
            authors,
            available_markets,
            copyrights,
            description,
            html_description,
            edition: None,
            explicit,
            external_urls: Box::new(external_urls),
            href,
            id,
            images,
            languages,
            media_type,
            name,
            narrators,
            publisher,
            r#type,
            uri,
            total_chapters,
        }
    }
}
/// The object type. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "audiobook")]
    Audiobook,
}

impl Default for Type {
    fn default() -> Type {
        Self::Audiobook
    }
}

