/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PrivateUserObject {
    /// The country of the user, as set in the user's account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The name displayed on the user's profile. `null` if not available. 
    #[serde(rename = "display_name", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// The user's email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    /// The user's explicit content settings. _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
    #[serde(rename = "explicit_content", skip_serializing_if = "Option::is_none")]
    pub explicit_content: Option<Box<spotify::ExplicitContentSettingsObject>>,
    /// Known external URLs for this user.
    #[serde(rename = "external_urls", skip_serializing_if = "Option::is_none")]
    pub external_urls: Option<Box<spotify::ExternalUrlObject>>,
    /// Information about the followers of the user.
    #[serde(rename = "followers", skip_serializing_if = "Option::is_none")]
    pub followers: Option<Box<spotify::FollowersObject>>,
    /// A link to the Web API endpoint for this user. 
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The user's profile image.
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<spotify::ImageObject>>,
    /// The user's Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
    #[serde(rename = "product", skip_serializing_if = "Option::is_none")]
    pub product: Option<String>,
    /// The object type: \"user\" 
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
    #[serde(rename = "uri", skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

impl PrivateUserObject {
    pub fn new() -> PrivateUserObject {
        PrivateUserObject {
            country: None,
            display_name: None,
            email: None,
            explicit_content: None,
            external_urls: None,
            followers: None,
            href: None,
            id: None,
            images: None,
            product: None,
            r#type: None,
            uri: None,
        }
    }
}

