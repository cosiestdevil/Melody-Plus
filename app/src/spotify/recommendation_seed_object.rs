/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RecommendationSeedObject {
    /// The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
    #[serde(rename = "afterFilteringSize", skip_serializing_if = "Option::is_none")]
    pub after_filtering_size: Option<i32>,
    /// The number of tracks available after relinking for regional availability. 
    #[serde(rename = "afterRelinkingSize", skip_serializing_if = "Option::is_none")]
    pub after_relinking_size: Option<i32>,
    /// A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`. 
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. 
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The number of recommended tracks available for this seed. 
    #[serde(rename = "initialPoolSize", skip_serializing_if = "Option::is_none")]
    pub initial_pool_size: Option<i32>,
    /// The entity type of this seed. One of `artist`, `track` or `genre`. 
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
}

impl RecommendationSeedObject {
    pub fn new() -> RecommendationSeedObject {
        RecommendationSeedObject {
            after_filtering_size: None,
            after_relinking_size: None,
            href: None,
            id: None,
            initial_pool_size: None,
            r#type: None,
        }
    }
}

