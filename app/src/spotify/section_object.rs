/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SectionObject {
    /// The starting point (in seconds) of the section.
    #[serde(rename = "start", skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
    /// The duration (in seconds) of the section.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// The confidence, from 0.0 to 1.0, of the reliability of the section's \"designation\".
    #[serde(rename = "confidence", skip_serializing_if = "Option::is_none")]
    pub confidence: Option<f64>,
    /// The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
    #[serde(rename = "loudness", skip_serializing_if = "Option::is_none")]
    pub loudness: Option<f64>,
    /// The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
    #[serde(rename = "tempo", skip_serializing_if = "Option::is_none")]
    pub tempo: Option<f64>,
    /// The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don't contain tempo (like pure speech) which would correspond to a low value in this field.
    #[serde(rename = "tempo_confidence", skip_serializing_if = "Option::is_none")]
    pub tempo_confidence: Option<f64>,
    /// The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<i32>,
    /// The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
    #[serde(rename = "key_confidence", skip_serializing_if = "Option::is_none")]
    pub key_confidence: Option<f64>,
    /// Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    /// The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
    #[serde(rename = "mode_confidence", skip_serializing_if = "Option::is_none")]
    pub mode_confidence: Option<f64>,
    /// An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
    #[serde(rename = "time_signature", skip_serializing_if = "Option::is_none")]
    pub time_signature: Option<i32>,
    /// The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
    #[serde(rename = "time_signature_confidence", skip_serializing_if = "Option::is_none")]
    pub time_signature_confidence: Option<f64>,
}

impl SectionObject {
    pub fn new() -> SectionObject {
        SectionObject {
            start: None,
            duration: None,
            confidence: None,
            loudness: None,
            tempo: None,
            tempo_confidence: None,
            key: None,
            key_confidence: None,
            mode: None,
            mode_confidence: None,
            time_signature: None,
            time_signature_confidence: None,
        }
    }
}
/// Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "-1")]
    Variant1,
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant12,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Variant1
    }
}

