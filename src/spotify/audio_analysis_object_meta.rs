/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AudioAnalysisObjectMeta {
    /// The version of the Analyzer used to analyze this track.
    #[serde(rename = "analyzer_version", skip_serializing_if = "Option::is_none")]
    pub analyzer_version: Option<String>,
    /// The platform used to read the track's audio data.
    #[serde(rename = "platform", skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// A detailed status code for this track. If analysis data is missing, this code may explain why.
    #[serde(rename = "detailed_status", skip_serializing_if = "Option::is_none")]
    pub detailed_status: Option<String>,
    /// The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
    #[serde(rename = "status_code", skip_serializing_if = "Option::is_none")]
    pub status_code: Option<i32>,
    /// The Unix timestamp (in seconds) at which this track was analyzed.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// The amount of time taken to analyze this track.
    #[serde(rename = "analysis_time", skip_serializing_if = "Option::is_none")]
    pub analysis_time: Option<f64>,
    /// The method used to read the track's audio data.
    #[serde(rename = "input_process", skip_serializing_if = "Option::is_none")]
    pub input_process: Option<String>,
}

impl AudioAnalysisObjectMeta {
    pub fn new() -> AudioAnalysisObjectMeta {
        AudioAnalysisObjectMeta {
            analyzer_version: None,
            platform: None,
            detailed_status: None,
            status_code: None,
            timestamp: None,
            analysis_time: None,
            input_process: None,
        }
    }
}

