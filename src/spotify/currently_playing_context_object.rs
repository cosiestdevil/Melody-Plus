/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use crate::{spotify};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CurrentlyPlayingContextObject {
    /// The device that is currently active. 
    #[serde(rename = "device", skip_serializing_if = "Option::is_none")]
    pub device: Option<Box<spotify::DeviceObject>>,
    /// off, track, context
    #[serde(rename = "repeat_state", skip_serializing_if = "Option::is_none")]
    pub repeat_state: Option<String>,
    /// If shuffle is on or off.
    #[serde(rename = "shuffle_state", skip_serializing_if = "Option::is_none")]
    pub shuffle_state: Option<bool>,
    /// A Context Object. Can be `null`.
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<spotify::ContextObject>>,
    /// Unix Millisecond Timestamp when data was fetched.
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i64>,
    /// Progress into the currently playing track or episode. Can be `null`.
    #[serde(rename = "progress_ms", skip_serializing_if = "Option::is_none")]
    pub progress_ms: Option<i32>,
    /// If something is currently playing, return `true`.
    #[serde(rename = "is_playing", skip_serializing_if = "Option::is_none")]
    pub is_playing: Option<bool>,
    #[serde(rename = "item", skip_serializing_if = "Option::is_none")]
    pub item: Option<Box<spotify::QueueObjectCurrentlyPlaying>>,
    /// The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 
    #[serde(rename = "currently_playing_type", skip_serializing_if = "Option::is_none")]
    pub currently_playing_type: Option<String>,
    /// Allows to update the user interface based on which playback actions are available within the current context. 
    #[serde(rename = "actions", skip_serializing_if = "Option::is_none")]
    pub actions: Option<Box<spotify::DisallowsObject>>,
}

impl CurrentlyPlayingContextObject {
    pub fn new() -> CurrentlyPlayingContextObject {
        CurrentlyPlayingContextObject {
            device: None,
            repeat_state: None,
            shuffle_state: None,
            context: None,
            timestamp: None,
            progress_ms: None,
            is_playing: None,
            item: None,
            currently_playing_type: None,
            actions: None,
        }
    }
}

