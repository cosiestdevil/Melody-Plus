/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeviceObject {
    /// The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.
    #[serde(rename = "id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub id: Option<Option<String>>,
    /// If this device is the currently active device.
    #[serde(rename = "is_active", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// If this device is currently in a private session.
    #[serde(rename = "is_private_session", skip_serializing_if = "Option::is_none")]
    pub is_private_session: Option<bool>,
    /// Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.
    #[serde(rename = "is_restricted", skip_serializing_if = "Option::is_none")]
    pub is_restricted: Option<bool>,
    /// A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Device type, such as \"computer\", \"smartphone\" or \"speaker\".
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The current volume in percent.
    #[serde(rename = "volume_percent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub volume_percent: Option<Option<i32>>,
    /// If this device can be used to set the volume.
    #[serde(rename = "supports_volume", skip_serializing_if = "Option::is_none")]
    pub supports_volume: Option<bool>,
}

impl DeviceObject {
    pub fn new() -> DeviceObject {
        DeviceObject {
            id: None,
            is_active: None,
            is_private_session: None,
            is_restricted: None,
            name: None,
            r#type: None,
            volume_percent: None,
            supports_volume: None,
        }
    }
}

