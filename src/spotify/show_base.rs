/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ShowBase {
    /// A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
    #[serde(rename = "available_markets")]
    pub available_markets: Vec<String>,
    /// The copyright statements of the show. 
    #[serde(rename = "copyrights")]
    pub copyrights: Vec<spotify::CopyrightObject>,
    /// A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
    #[serde(rename = "description")]
    pub description: String,
    /// A description of the show. This field may contain HTML tags. 
    #[serde(rename = "html_description")]
    pub html_description: String,
    /// Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
    #[serde(rename = "explicit")]
    pub explicit: bool,
    /// External URLs for this show. 
    #[serde(rename = "external_urls")]
    pub external_urls: Box<spotify::ExternalUrlObject>,
    /// A link to the Web API endpoint providing full details of the show. 
    #[serde(rename = "href")]
    pub href: String,
    /// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
    #[serde(rename = "id")]
    pub id: String,
    /// The cover art for the show in various sizes, widest first. 
    #[serde(rename = "images")]
    pub images: Vec<spotify::ImageObject>,
    /// True if all of the shows episodes are hosted outside of Spotify's CDN. This field might be `null` in some cases. 
    #[serde(rename = "is_externally_hosted")]
    pub is_externally_hosted: bool,
    /// A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
    #[serde(rename = "languages")]
    pub languages: Vec<String>,
    /// The media type of the show. 
    #[serde(rename = "media_type")]
    pub media_type: String,
    /// The name of the episode. 
    #[serde(rename = "name")]
    pub name: String,
    /// The publisher of the show. 
    #[serde(rename = "publisher")]
    pub publisher: String,
    /// The object type. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
    #[serde(rename = "uri")]
    pub uri: String,
    /// The total number of episodes in the show. 
    #[serde(rename = "total_episodes")]
    pub total_episodes: i32,
}

impl ShowBase {
    pub fn new(available_markets: Vec<String>, copyrights: Vec<spotify::CopyrightObject>, description: String, html_description: String, explicit: bool, external_urls: spotify::ExternalUrlObject, href: String, id: String, images: Vec<spotify::ImageObject>, is_externally_hosted: bool, languages: Vec<String>, media_type: String, name: String, publisher: String, r#type: Type, uri: String, total_episodes: i32) -> ShowBase {
        ShowBase {
            available_markets,
            copyrights,
            description,
            html_description,
            explicit,
            external_urls: Box::new(external_urls),
            href,
            id,
            images,
            is_externally_hosted,
            languages,
            media_type,
            name,
            publisher,
            r#type,
            uri,
            total_episodes,
        }
    }
}
/// The object type. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "show")]
    Show,
}

impl Default for Type {
    fn default() -> Type {
        Self::Show
    }
}

