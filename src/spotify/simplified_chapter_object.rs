/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};
use crate::spotify::ReleaseDatePrecision;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimplifiedChapterObject {
    /// A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available. 
    #[serde(rename = "audio_preview_url", deserialize_with = "Option::deserialize")]
    pub audio_preview_url: Option<String>,
    /// A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
    #[serde(rename = "available_markets", skip_serializing_if = "Option::is_none")]
    pub available_markets: Option<Vec<String>>,
    /// The number of the chapter 
    #[serde(rename = "chapter_number")]
    pub chapter_number: i32,
    /// A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
    #[serde(rename = "description")]
    pub description: String,
    /// A description of the chapter. This field may contain HTML tags. 
    #[serde(rename = "html_description")]
    pub html_description: String,
    /// The chapter length in milliseconds. 
    #[serde(rename = "duration_ms")]
    pub duration_ms: i32,
    /// Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown). 
    #[serde(rename = "explicit")]
    pub explicit: bool,
    /// External URLs for this chapter. 
    #[serde(rename = "external_urls")]
    pub external_urls: Box<spotify::ExternalUrlObject>,
    /// A link to the Web API endpoint providing full details of the chapter. 
    #[serde(rename = "href")]
    pub href: String,
    /// The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
    #[serde(rename = "id")]
    pub id: String,
    /// The cover art for the chapter in various sizes, widest first. 
    #[serde(rename = "images")]
    pub images: Vec<spotify::ImageObject>,
    /// True if the chapter is playable in the given market. Otherwise false. 
    #[serde(rename = "is_playable")]
    pub is_playable: bool,
    /// A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
    #[serde(rename = "languages")]
    pub languages: Vec<String>,
    /// The name of the chapter. 
    #[serde(rename = "name")]
    pub name: String,
    /// The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
    #[serde(rename = "release_date")]
    pub release_date: String,
    /// The precision with which `release_date` value is known. 
    #[serde(rename = "release_date_precision")]
    pub release_date_precision: ReleaseDatePrecision,
    /// The user's most recent position in the chapter. Set if the supplied access token is a user token and has the scope 'user-read-playback-position'. 
    #[serde(rename = "resume_point", skip_serializing_if = "Option::is_none")]
    pub resume_point: Option<Box<spotify::ResumePointObject>>,
    /// The object type. 
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
    #[serde(rename = "uri")]
    pub uri: String,
    /// Included in the response when a content restriction is applied. 
    #[serde(rename = "restrictions", skip_serializing_if = "Option::is_none")]
    pub restrictions: Option<Box<spotify::ChapterRestrictionObject>>,
}

impl SimplifiedChapterObject {
    pub fn new(audio_preview_url: Option<String>, chapter_number: i32, description: String, html_description: String, duration_ms: i32, explicit: bool, external_urls: spotify::ExternalUrlObject, href: String, id: String, images: Vec<spotify::ImageObject>, is_playable: bool, languages: Vec<String>, name: String, release_date: String, release_date_precision: ReleaseDatePrecision, r#type: Type, uri: String) -> SimplifiedChapterObject {
        SimplifiedChapterObject {
            audio_preview_url,
            available_markets: None,
            chapter_number,
            description,
            html_description,
            duration_ms,
            explicit,
            external_urls: Box::new(external_urls),
            href,
            id,
            images,
            is_playable,
            languages,
            name,
            release_date,
            release_date_precision,
            resume_point: None,
            r#type,
            uri,
            restrictions: None,
        }
    }
}

/// The object type. 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "episode")]
    Episode,
}

impl Default for Type {
    fn default() -> Type {
        Self::Episode
    }
}

