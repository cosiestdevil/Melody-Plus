/*
 * Spotify Web API
 *
 * You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::spotify;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StartAUsersPlaybackRequest {
    /// Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` 
    #[serde(rename = "context_uri", skip_serializing_if = "Option::is_none")]
    pub context_uri: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` 
    #[serde(rename = "uris", skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
    /// Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and canâ€™t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` 
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<std::collections::HashMap<String, serde_json::Value>>,
    /// integer
    #[serde(rename = "position_ms", skip_serializing_if = "Option::is_none")]
    pub position_ms: Option<std::collections::HashMap<String, serde_json::Value>>,
}

impl StartAUsersPlaybackRequest {
    pub fn new() -> StartAUsersPlaybackRequest {
        StartAUsersPlaybackRequest {
            context_uri: None,
            uris: None,
            offset: None,
            position_ms: None,
        }
    }
}

